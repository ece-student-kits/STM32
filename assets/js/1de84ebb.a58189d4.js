"use strict";(self.webpackChunkstm_32_documentaion=self.webpackChunkstm_32_documentaion||[]).push([[162],{1004:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(4848),s=t(8453);const a={sidebar_position:2},o="Code",i={id:"LM35/Code",title:"Code",description:"Task: Interface an LM35 sensor to measure the temperature and display in the Serial Console",source:"@site/docs/LM35/Code.md",sourceDirName:"LM35",slug:"/LM35/Code",permalink:"/STM32/docs/LM35/Code",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/LM35/Code.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"AnalogSensors: LM35",permalink:"/STM32/docs/LM35/"},next:{title:"PWM",permalink:"/STM32/docs/PWM_LED/"}},l={},c=[{value:"Step 1: Create a STM32 Project &quot;LM35&quot;",id:"step-1-create-a-stm32-project-lm35",level:3},{value:"Step 2: Configure GPIO Pins",id:"step-2-configure-gpio-pins",level:3},{value:"Step 3: Code Snippet to read temperature using LM35 Sensor, and display in the Serial Console",id:"step-3-code-snippet-to-read-temperature-using-lm35-sensor-and-display-in-the-serial-console",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"code",children:"Code"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Task: Interface an LM35 sensor to measure the temperature and display in the Serial Console"})}),"\n",(0,r.jsx)(n.h3,{id:"step-1-create-a-stm32-project-lm35",children:'Step 1: Create a STM32 Project "LM35"'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create a new project & initialize all pheripherals in default configuration"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"step-2-configure-gpio-pins",children:"Step 2: Configure GPIO Pins"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Image",src:t(8717).A+"",width:"737",height:"289"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PA0"})," as ",(0,r.jsx)(n.code,{children:"ADC1_INT0"})," (A0 Pin, SensorValue)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PA2"})," as ",(0,r.jsx)(n.code,{children:"USART_TX"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PA3"})," as ",(0,r.jsx)(n.code,{children:"USART_RX"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"step-3-code-snippet-to-read-temperature-using-lm35-sensor-and-display-in-the-serial-console",children:"Step 3: Code Snippet to read temperature using LM35 Sensor, and display in the Serial Console"}),"\n",(0,r.jsxs)(n.p,{children:["Paste the following code snippet inside the ",(0,r.jsx)(n.code,{children:"/* USER CODE BEGIN Includes */"})," loop in ",(0,r.jsx)(n.code,{children:"main.c"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include "stdio.h"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Paste the following code snippet inside the ",(0,r.jsx)(n.code,{children:"/* USER CODE BEGIN 2 */"})," loop in ",(0,r.jsx)(n.code,{children:"main.c"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"// adc_value variable store the adc value,\r\n// value variable store the temperature value\r\nint adc_value, value;\r\n// store the converted voltage value from analog value\r\nfloat voltage;\r\n\r\nint calibration_offset = 0;  // Calibrate the difference between measured temperature and actual temperature\r\n\r\nint calibration_factor = 100; //10 mV per \xb0C, the factor will be 100 (1V = 1000 mV)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Paste the following code snippet inside the ",(0,r.jsx)(n.code,{children:"while (1)"})," loop in ",(0,r.jsx)(n.code,{children:"main.c"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// start ADC convertion\r\nHAL_ADC_Start(&hadc1);\r\n// ADC poll for conversion\r\nHAL_ADC_PollForConversion(&hadc1, 100);\r\n// get the ADC conversion value\r\nadc_value = HAL_ADC_GetValue(&hadc1);\r\n// end ADC convertion\r\nHAL_ADC_Stop(&hadc1);\r\n// convert ADC value into voltage\r\nvoltage = (adc_value*3.3)/4096;\r\n// convert the voltage into temperature\r\nvalue = (voltage * calibration_factor) + calibration_offset;\r\n\r\n// Format the complete message to send\r\nchar message[20]; // Buffer to hold the complete message to print\r\nsprintf(message, "Temperature: %d C \\n\\r", value);\r\n\r\n// Transmit the message over UART\r\nHAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 10);\r\nHAL_Delay(1000);\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8717:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/2-fae73ebd8157ea70c702caa3de37241a.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);